{"version":3,"sources":["components/UsersList.jsx","components/ChatBox.jsx","components/ChatInput.jsx","components/Chat.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["UsersList","props","className","roomName","users","map","u","i","key","ChatBox","messages","m","ChatInput","useState","message","setMessage","handleSend","onSend","type","value","placeholder","autoFocus","onChange","e","target","onKeyPress","onClick","Chat","state","socket","io","emit","username","on","setState","msg","finalMsg","this","bind","Component","Login","setUsername","setRoomName","valid","setValid","handleSubmit","onSubmit","useEffect","htmlFor","id","autoComplete","length","disabled","App","to","newUsername","newRoomName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAeeA,MAbf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,cACb,wBAAIA,UAAU,eAAd,SAAmCD,EAAME,UACzC,4BACGF,EAAMG,MAAMC,KAAI,SAACC,EAAGC,GACnB,OAAO,wBAAIC,IAAKD,GAAID,SCUfG,MAhBf,SAAiBR,GACf,OACE,yBAAKC,UAAU,YACb,4BACGD,EAAMS,SAASL,KAAI,SAACM,EAAGJ,GACtB,OACE,wBAAIC,IAAKD,EAAGL,UAAU,gBACnBS,SCuBAC,MA9Bf,SAAmBX,GAAQ,IAAD,EACMY,mBAAS,IADf,mBACjBC,EADiB,KACRC,EADQ,KAOxB,SAASC,IACPf,EAAMgB,OAAOH,GACbC,EAAW,IAGb,OACE,yBAAKb,UAAU,SACb,2BACEA,UAAU,MACVgB,KAAK,OACLC,MAAOL,EACPM,YAAY,wBACZC,WAAS,EACTC,SAjBN,SAAsBC,GACpBR,EAAWQ,EAAEC,OAAOL,QAiBhBM,WAAY,SAAAF,GAAC,MAAc,UAAVA,EAAEf,KAAmBQ,OAExC,4BAAQd,UAAU,WAAWwB,QAASV,GAAtC,UCsCSW,E,YAnDb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KANR2B,MAAQ,CACNxB,MAAO,GACPM,SAAU,IAMV,EAAKmB,OAASC,IAAG,yBACjB,EAAKD,OAAOE,KAAK,YAAa9B,EAAM+B,SAAU/B,EAAME,UAEpD,EAAK0B,OAAOI,GAAG,QAAQ,SAAC7B,EAAO4B,GAC7B,EAAKE,SAAS,CAAE9B,MAAM,GAAD,mBAAM,EAAKwB,MAAMxB,OAAjB,YAA2BA,MAChD,EAAK8B,SAAS,CACZxB,SAAS,GAAD,mBAAM,EAAKkB,MAAMlB,UAAjB,WAA8BsB,EAA9B,sBAIZ,EAAKH,OAAOI,GAAG,aAAa,SAAAD,GAC1B,EAAKE,SAAS,CAAE9B,MAAM,GAAD,mBAAM,EAAKwB,MAAMxB,OAAjB,CAAwB4B,MAC7C,EAAKE,SAAS,CACZxB,SAAS,GAAD,mBAAM,EAAKkB,MAAMlB,UAAjB,WAA8BsB,EAA9B,sBAIZ,EAAKH,OAAOI,GAAG,gBAAgB,SAACE,EAAKH,GACnC,IAAMI,EAAQ,UAAMJ,EAAN,aAAmBG,GACjC,EAAKD,SAAS,CAAExB,SAAS,GAAD,mBAAM,EAAKkB,MAAMlB,UAAjB,CAA2B0B,SAGrD,EAAKP,OAAOI,GAAG,gBAAgB,SAAA7B,GAC7B,EAAK8B,SAAS,CAAE9B,aA1BD,E,wEA8BR+B,GACTE,KAAKR,OAAOE,KAAK,eAAgBI,EAAKE,KAAKpC,MAAM+B,UACjD,IAAMI,EAAQ,UAAMC,KAAKpC,MAAM+B,SAAjB,mBAAoCG,GAClDE,KAAKH,SAAS,CAAExB,SAAS,GAAD,mBAAM2B,KAAKT,MAAMlB,UAAjB,CAA2B0B,Q,+BAInD,OACE,yBAAKlC,UAAU,oBACb,kBAAC,EAAD,CACEA,UAAU,OACVE,MAAOiC,KAAKT,MAAMxB,MAClBD,SAAUkC,KAAKpC,MAAME,WAEvB,kBAAC,EAAD,CAASD,UAAU,MAAMQ,SAAU2B,KAAKT,MAAMlB,WAC9C,kBAAC,EAAD,CAAWR,UAAU,QAAQe,OAAQoB,KAAKrB,WAAWsB,KAAKD,a,GAnD/CE,aCyDJC,MA7Df,SAAevC,GAAQ,IAAD,EACYY,mBAAS,IADrB,mBACbmB,EADa,KACHS,EADG,OAEY5B,mBAAS,IAFrB,mBAEbV,EAFa,KAEHuC,EAFG,OAGM7B,oBAAS,GAHf,mBAGb8B,EAHa,KAGNC,EAHM,KAmBpB,SAASC,KACO,IAAVF,GACJ1C,EAAM6C,SAASd,EAAU7B,GAG3B,OATA4C,qBAAU,WACRH,EAAsB,KAAbZ,GAAgC,KAAb7B,KAC3B,CAAC6B,EAAU7B,IAQZ,yBAAKD,UAAU,aACb,wBAAIA,UAAU,cAAd,SACA,2BAAOA,UAAU,QAAQ8C,QAAQ,YAAjC,YAGA,2BACE9C,UAAU,YACV+C,GAAG,WACH/B,KAAK,OACLC,MAAOa,EACPZ,YAAY,yBACZC,WAAS,EACT6B,aAAa,MACb5B,SAjCN,SAA8BC,GACdA,EAAEC,OAAOL,MACbgC,QAAU,IAAIV,EAAYlB,EAAEC,OAAOL,QAgCzCM,WAAY,SAAAF,GAAC,MAAc,UAAVA,EAAEf,KAAmBqC,OAExC,2BAAO3C,UAAU,QAAQ8C,QAAQ,aAAjC,aAGA,2BACE9C,UAAU,YACV+C,GAAG,YACH/B,KAAK,OACLC,MAAOhB,EACPiB,YAAY,qBACZ8B,aAAa,MACb5B,SAzCN,SAA8BC,GACdA,EAAEC,OAAOL,MACbgC,QAAU,GAAGT,EAAYnB,EAAEC,OAAOL,QAwCxCM,WAAY,SAAAF,GAAC,MAAc,UAAVA,EAAEf,KAAmBqC,OAExC,4BAAQ3C,UAAU,eAAekD,UAAWT,EAAOjB,QAASmB,GAA5D,YC3BSQ,MAvBf,WAAgB,IAAD,EACmBxC,mBAAS,MAD5B,mBACNmB,EADM,KACIS,EADJ,OAEmB5B,mBAAS,MAF5B,mBAENV,EAFM,KAEIuC,EAFJ,KASb,OACE,yBAAKxC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUoD,GAAG,MAED,OAAbtB,EACC,kBAAC,EAAD,CAAOc,SAXb,SAAsBS,EAAaC,GACjCf,EAAYc,GACZb,EAAYc,MAWR,kBAAC,EAAD,CAAMxB,SAAUA,EAAU7B,SAAUA,MCXxBsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.220b00eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction UsersList(props) {\r\n  return (\r\n    <div className=\"users-list\">\r\n      <h2 className=\"glow center\">Room: {props.roomName}</h2>\r\n      <ul>\r\n        {props.users.map((u, i) => {\r\n          return <li key={i}>{u}</li>;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UsersList;\r\n","import React from 'react';\r\n\r\nfunction ChatBox(props) {\r\n  return (\r\n    <div className=\"chat-box\">\r\n      <ul>\r\n        {props.messages.map((m, i) => {\r\n          return (\r\n            <li key={i} className=\"chat-message\">\r\n              {m}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n","import React, { useState } from 'react';\r\n\r\nfunction ChatInput(props) {\r\n  const [message, setMessage] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setMessage(e.target.value);\r\n  }\r\n\r\n  function handleSend() {\r\n    props.onSend(message);\r\n    setMessage('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n        className=\"neu\"\r\n        type=\"text\"\r\n        value={message}\r\n        placeholder=\"Enter your message...\"\r\n        autoFocus\r\n        onChange={handleChange}\r\n        onKeyPress={e => e.key === 'Enter' && handleSend()}\r\n      />\r\n      <button className=\"neu glow\" onClick={handleSend}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatInput;\r\n","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport UsersList from './UsersList';\r\nimport ChatBox from './ChatBox';\r\nimport ChatInput from './ChatInput';\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n    users: [],\r\n    messages: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.socket = io('http://localhost:5000');\r\n    this.socket.emit('connected', props.username, props.roomName);\r\n\r\n    this.socket.on('init', (users, username) => {\r\n      this.setState({ users: [...this.state.users, ...users] });\r\n      this.setState({\r\n        messages: [...this.state.messages, `${username} has joined`]\r\n      });\r\n    });\r\n\r\n    this.socket.on('connected', username => {\r\n      this.setState({ users: [...this.state.users, username] });\r\n      this.setState({\r\n        messages: [...this.state.messages, `${username} has joined`]\r\n      });\r\n    });\r\n\r\n    this.socket.on('send message', (msg, username) => {\r\n      const finalMsg = `${username}: ${msg}`;\r\n      this.setState({ messages: [...this.state.messages, finalMsg] });\r\n    });\r\n\r\n    this.socket.on('disconnected', users => {\r\n      this.setState({ users });\r\n    });\r\n  }\r\n\r\n  handleSend(msg) {\r\n    this.socket.emit('send message', msg, this.props.username);\r\n    const finalMsg = `${this.props.username} (You): ${msg}`;\r\n    this.setState({ messages: [...this.state.messages, finalMsg] });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"neu content-grid\">\r\n        <UsersList\r\n          className=\"list\"\r\n          users={this.state.users}\r\n          roomName={this.props.roomName}\r\n        />\r\n        <ChatBox className=\"box\" messages={this.state.messages} />\r\n        <ChatInput className=\"input\" onSend={this.handleSend.bind(this)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Login(props) {\r\n  const [username, setUsername] = useState('');\r\n  const [roomName, setRoomName] = useState('');\r\n  const [valid, setValid] = useState(false);\r\n\r\n  function handleUsernameChange(e) {\r\n    const value = e.target.value;\r\n    if (value.length <= 16) setUsername(e.target.value);\r\n  }\r\n\r\n  function handleRoomNameChange(e) {\r\n    const value = e.target.value;\r\n    if (value.length <= 8) setRoomName(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setValid(username !== '' && roomName !== '');\r\n  }, [username, roomName]);\r\n\r\n  function handleSubmit() {\r\n    if (valid === false) return;\r\n    props.onSubmit(username, roomName);\r\n  }\r\n\r\n  return (\r\n    <div className=\"neu login\">\r\n      <h1 className=\"glow title\">Login</h1>\r\n      <label className=\"label\" htmlFor=\"username\">\r\n        Username\r\n      </label>\r\n      <input\r\n        className=\"neu input\"\r\n        id=\"username\"\r\n        type=\"text\"\r\n        value={username}\r\n        placeholder=\"Enter your username...\"\r\n        autoFocus\r\n        autoComplete=\"off\"\r\n        onChange={handleUsernameChange}\r\n        onKeyPress={e => e.key === 'Enter' && handleSubmit()}\r\n      />\r\n      <label className=\"label\" htmlFor=\"room-name\">\r\n        Room name\r\n      </label>\r\n      <input\r\n        className=\"neu input\"\r\n        id=\"room-name\"\r\n        type=\"text\"\r\n        value={roomName}\r\n        placeholder=\"Enter room name...\"\r\n        autoComplete=\"off\"\r\n        onChange={handleRoomNameChange}\r\n        onKeyPress={e => e.key === 'Enter' && handleSubmit()}\r\n      />\r\n      <button className=\"neu glow btn\" disabled={!valid} onClick={handleSubmit}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Redirect } from 'react-router-dom';\nimport Chat from './components/Chat';\nimport Login from './components/Login';\n\nfunction App() {\n  const [username, setUsername] = useState(null);\n  const [roomName, setRoomName] = useState(null);\n\n  function handleSubmit(newUsername, newRoomName) {\n    setUsername(newUsername);\n    setRoomName(newRoomName);\n  }\n\n  return (\n    <div className=\"container\">\n      <Router>\n        <Redirect to=\"\" />\n      </Router>\n      {username === null ? (\n        <Login onSubmit={handleSubmit} />\n      ) : (\n        <Chat username={username} roomName={roomName} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}